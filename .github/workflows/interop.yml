name: interop

on: [push]

jobs:
  wireshark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: wireshark/wireshark
      # - name: Install dependencies
      #   run: |
      #     sudo tools/debian-setup.sh --install-deb-deps --install-optional
      # - name: Build packages
      #   run: |
      #     dpkg-buildpackage
      #     mkdir packages
      #     mv ../*.deb packages
      # - name: Upload packages
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: wireshark
      #     path: packages
  matrix:
    runs-on: ubuntu-latest
    outputs:
      servers: ${{ steps.set-servers.outputs.servers }}
      clients: ${{ steps.set-clients.outputs.clients }}
      versions: ${{ steps.set-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: determine servers
        id: set-servers
        run: |
          SERVERS=$(jq -c 'with_entries(select(.value.role == "server" or .value.role == "both")) | keys_unsorted' implementations.json)
          echo $SERVERS
          echo "::set-output name=servers::$SERVERS"
      - name: determine clients
        id: set-clients
        run: |
          CLIENTS=$(jq -c 'with_entries(select(.value.role == "client" or .value.role == "both")) | keys_unsorted' implementations.json)
          echo $CLIENTS
          echo "::set-output name=clients::$CLIENTS"
      - name: Install moreutils # sponge is needed for the set-versions step
        run: |
          sudo apt-get install -y moreutils
      - name: Get Docker image versions
        id: set-versions
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled # needed for docker manifest inspect
        run: |
          VERSIONS=$(.github/workflows/versions.sh)
          echo $VERSIONS | jq '.'
          VERSIONS_C=$(echo $VERSIONS | jq -c '.')
          echo "::set-output name=versions::$VERSIONS_C"
  tests:
    needs: [ wireshark, matrix ]
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: 
        server: ${{ fromJson(needs.matrix.outputs.servers) }}
        client: ${{ fromJson(needs.matrix.outputs.clients) }}
    name: (${{ matrix.server }} - ${{ matrix.client }})
    steps:
      - uses: actions/checkout@v2
      - name: Extract for network simulator
        run: |
          echo ${{ fromJson(needs.matrix.outputs.versions).quic-network-simulator.url }}
          echo ${{ fromJson(needs.matrix.outputs.versions).quic-network-simulator.hash }}
      - name: Extract for server
        run: |
          SERVER=${{ matrix.server }}
          echo $SERVER
          echo ${{ fromJson(needs.matrix.outputs.versions).${SERVER}.url }}
          echo ${{ fromJson(needs.matrix.outputs.versions).${SERVER}.hash }}
      - name: Pull server Docker image
        run: |
          URL=$(echo '${{ needs.matrix.outputs.versions }}' | jq -r ".[\"${{ matrix.server }}\"].url")
          HASH=$(echo '${{ needs.matrix.outputs.versions }}' | jq -r ".[\"${{ matrix.server }}\"].hash")
          echo "Pulling $URL@$HASH"
          docker pull "$URL"@"$HASH"
      - name: Pull client Docker image
        run: |
          URL=$(echo '${{ needs.matrix.outputs.versions }}' | jq -r ".[\"${{ matrix.client }}\"].url")
          HASH=$(echo '${{ needs.matrix.outputs.versions }}' | jq -r ".[\"${{ matrix.client }}\"].hash")
          echo "Pulling $URL@$HASH"
          docker pull "$URL"@"$HASH"
      # - uses: actions/setup-python@v1
      #   with:
      #     python-version: 3.8
      # - name: Download Wireshark
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: wireshark
      #     path: packages
      # - name: Install Wireshark
      #   run: |
      #     sudo dpkg -i \
      #       packages/libwireshark-data_*.deb \
      #       packages/libwireshark0_*.deb \
      #       packages/libwiretap0_*.deb \
      #       packages/libwsutil0_*.deb \
      #       packages/tshark_*.deb \
      #       packages/wireshark-common_*.deb || true
      #     sudo apt-get -f install
      # - name: Install Python packages
      #   run: |
      #     pip install -U pip
      #     pip install -r requirements.txt
      # - name: Run tests
      #   env:
      #     CRON: "true"
      #   run: |
      #     (python run.py --client ${{ matrix.client }} --server ${{ matrix.server }} --log-dir logs --json ${{ matrix.server }}_${{ matrix.client }}_results.json -t onlyTests || true) | tee output.txt
      #     mkdir -p logs/${{ matrix.server }}_${{ matrix.client }}
      #     mv output.txt logs/${{ matrix.server }}_${{ matrix.client }}/
      # - name: Run measurements
      #   env:
      #     CRON: "true"
      #   run: |
      #     python run.py --client ${{ matrix.client }} --server ${{ matrix.server }} --log-dir logs_measurement --json ${{ matrix.server }}_${{ matrix.client }}_measurements.json -t onlyMeasurements || true
      #     find logs_measurement -depth -name "sim" -type d -exec rm -r "{}" \;
      #     find logs_measurement -depth -name "client" -type d -exec rm -r "{}" \;
      #     find logs_measurement -depth -name "server" -type d -exec rm -r "{}" \;
      #     mv logs_measurement/${{ matrix.server }}_${{ matrix.client }}/* logs/${{ matrix.server }}_${{ matrix.client }}/
      # - name: Upload logs
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: interop.seemann.io
      #     username: ${{ secrets.INTEROP_SEEMANN_IO_USER }}
      #     key: ${{ secrets.INTEROP_SEEMANN_IO_SSH_KEY }}
      #     source: logs/${{ matrix.server }}_${{ matrix.client }}
      #     target: /root/src/quic-interop-runner/web/${{ github.run_id }}
      #     strip_components: 1
      # - name: Upload result
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: results
      #     path: |
      #       ${{ matrix.server }}_${{ matrix.client }}_results.json
      #       ${{ matrix.server }}_${{ matrix.client }}_measurements.json
  aggregate:
    needs: [ matrix, tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      # - name: Download results
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: results
      - name: Aggregate results
        run: python .github/workflows/aggregate.py --server ${{ join(fromJson(needs.matrix.outputs.servers), ',') }} --client ${{ join(fromJson(needs.matrix.outputs.clients), ',') }} --log-dir=${{ github.run_id }} --output result.json
      # - name: Upload result
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: interop.seemann.io
      #     username: ${{ secrets.INTEROP_SEEMANN_IO_USER }}
      #     key: ${{ secrets.INTEROP_SEEMANN_IO_SSH_KEY }}
      #     source: result.json
      #     target: /root/src/quic-interop-runner/web/${{ github.run_id }}
      # - name: Publish result
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: interop.seemann.io
      #     username: ${{ secrets.INTEROP_SEEMANN_IO_USER }}
      #     key: ${{ secrets.INTEROP_SEEMANN_IO_SSH_KEY }}
      #     script: |
      #       cd /root/src/quic-interop-runner/web/
      #       jq '. += [ "${{ github.run_id }}" ]' logs.json | sponge logs.json
      #       rm latest && ln -s ${{ github.run_id }} latest
